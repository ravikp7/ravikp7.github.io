{"version":3,"sources":["components/Header/Header.module.css","pages/MainPage.module.css","App.module.css","assets/my-picture.jpg","components/Header/Header.js","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mainHeader","title","navContainer","navbar","navList","navItem","mainPage","banner","imageContainer","infoCard","image-overlay","infoText","displayPicture","app","appHeader","__webpack_require__","p","Header","react_default","a","createElement","className","style","map","navTopic","key","href","Component","MainPage","src","alt","App","Header_Header","MainPage_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,WAAA,2BAAAC,MAAA,sBAAAC,aAAA,6BAAAC,OAAA,uBAAAC,QAAA,wBAAAC,QAAA,0CCAlBP,EAAAC,QAAA,CAAkBO,SAAA,2BAAAC,OAAA,yBAAAC,eAAA,iCAAAC,SAAA,2BAAAC,gBAAA,gCAAAC,SAAA,2BAAAC,eAAA,wDCAlBd,EAAAC,QAAA,CAAkBc,IAAA,iBAAAC,UAAA,2CCDlBhB,EAAAC,QAAiBgB,EAAAC,EAAuB,wOCGnBC,mLAGjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMtB,YACpBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMrB,OAAtB,qBACAiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMpB,cACpBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMnB,QACpBe,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMlB,SANb,CAAC,WAAY,OAAQ,QAAS,WAO3BmB,IAAI,SAAAC,GAAQ,OACpBN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMjB,QAASoB,IAAKD,GAClCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,OAAOF,kBAZCG,8CCCfC,mLAEjB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMhB,UACpBY,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMf,QACpBW,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMd,gBACpBU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMV,eAAgBiB,IAAKjB,IAAgBkB,IAAI,uBAEjEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMb,UACpBS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,UAAtB,+BAT0BgB,6BCcvBI,mLAXX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMT,KACpBK,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMR,WACvBI,EAAAC,EAAAC,cAACY,EAAD,OAEFd,EAAAC,EAAAC,cAACa,EAAD,cAPUN,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2bcf0a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainHeader\":\"Header_mainHeader__3Bz6Q\",\"title\":\"Header_title__3MQmh\",\"navContainer\":\"Header_navContainer__1Rh8y\",\"navbar\":\"Header_navbar__L-qJj\",\"navList\":\"Header_navList__tFs9B\",\"navItem\":\"Header_navItem__3THhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPage\":\"MainPage_mainPage__wExVw\",\"banner\":\"MainPage_banner__1rrxL\",\"imageContainer\":\"MainPage_imageContainer__35OO4\",\"infoCard\":\"MainPage_infoCard__2mDDO\",\"image-overlay\":\"MainPage_image-overlay__FS35Z\",\"infoText\":\"MainPage_infoText__sskmx\",\"displayPicture\":\"MainPage_displayPicture__1f0eO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1hEDz\",\"appHeader\":\"App_appHeader__tlz1c\"};","module.exports = __webpack_public_path__ + \"static/media/my-picture.901c0169.jpg\";","import React, { Component } from 'react';\nimport style from './Header.module.css';\n\nexport default class Header extends Component {\n  render() {\n    const navItems = ['Projects', 'Blog', 'About', 'Contact'];\n    return (\n      <div className={style.mainHeader}>\n        <div className={style.title}>Ravi Kumar Prasad</div>\n        <div className={style.navContainer}>\n          <nav className={style.navbar}>\n            <div className={style.navList}>\n              {navItems.map(navTopic => (\n                <div className={style.navItem} key={navTopic}>\n                  <div>\n                    <a href=\"#na\">{navTopic}</a>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport displayPicture from '../assets/my-picture.jpg';\nimport style from './MainPage.module.css';\n\nexport default class MainPage extends Component {\n  render() {\n    return (\n      <div className={style.mainPage}>\n        <div className={style.banner}>\n          <div className={style.imageContainer}>\n            <img className={style.displayPicture} src={displayPicture} alt=\"Ravi Kumar Prasad\" />\n          </div>\n          <div className={style.infoCard}>\n            <div className={style.infoText}>Ravi Kumar Prasad</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport MainPage from './pages/MainPage';\nimport style from './App.module.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={style.app}>\n        <header className={style.appHeader}>\n          <Header />\n        </header>\n        <MainPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}